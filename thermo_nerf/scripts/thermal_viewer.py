from dataclasses import dataclass
from pathlib import Path

import tyro
from nerfstudio.scripts.viewer.run_viewer import RunViewer, _start_viewer

from thermo_nerf.render.renderer import Renderer


@dataclass
class ThermalViewer(RunViewer):
    def main(self, transforms_path: Path, eval_num_rays_per_chunk) -> None:
        """Setup and start the viewer"""
        pipeline, config, step = Renderer.extract_pipeline(
            model_path=self.load_config,
            transforms_path=transforms_path,
            eval_num_rays_per_chunk=eval_num_rays_per_chunk,
        )

        num_rays_per_chunk = config.viewer.num_rays_per_chunk
        assert self.viewer.num_rays_per_chunk == -1
        config.vis = self.vis
        config.viewer = self.viewer.as_viewer_config()
        config.viewer.num_rays_per_chunk = num_rays_per_chunk

        _start_viewer(config, pipeline, step)


@dataclass
class ViewerInputs:
    """Stores input arguments used for the viewer."""

    model_path: Path
    """Path to the model directory containing a config.yml file"""
    dataset_path: Path
    """
    Path to a dataset containing a transforms.json file generated by COLMAP.
    Used to query the dataset first pose to generate a spiral trajectory
    """
    eval_num_rays_per_chunk: int | None = None
    """Specifies number of rays per chunk during eval"""
    websocket_port: int | None = None
    """The websocket port to connect to. If None, use default 7007 port."""
    create_web_url: bool = False
    """
    Whether to create an online URL for the viewer. Is useful for remote environements
    """

    @property
    def transforms_path(self) -> Path:
        return Path(self.dataset_path, "transforms.json")


def main() -> None:
    tyro.extras.set_accent_color("bright_yellow")
    viewer_args = tyro.cli(ViewerInputs)

    viewer = ThermalViewer(load_config=viewer_args.model_path)
    viewer.viewer.websocket_port = viewer_args.websocket_port
    viewer.viewer.make_share_url = viewer_args.create_web_url
    viewer.main(
        transforms_path=viewer_args.transforms_path,
        eval_num_rays_per_chunk=viewer_args.eval_num_rays_per_chunk,
    )


if __name__ == "__main__":
    main()
