from dataclasses import dataclass, field
from pathlib import Path

import tyro

from thermo_nerf.evaluator.evaluator import Evaluator
from thermo_nerf.render.renderer import Renderer
from thermo_nerf.rendered_image_modalities import RenderedImageModality


@dataclass
class EvalCLIArgs:
    """Stores input arguments used for rendering."""

    model_uri: Path
    """Path to model."""
    dataset_path: Path
    """Path to a dataset containing a transforms.json file generated by COLMAP.
    Used to query the dataset first pose to generate a spiral trajectory"""
    output_folder: Path = Path("./outputs")
    """Name of the output folder to save metrics"""
    modalities_to_save: list[RenderedImageModality] = field(
        default_factory=lambda: [
            RenderedImageModality.RGB,
        ]
    )
    """Name of the renderer outputs to use: rgb, depth, accumulation."""


def main() -> None:
    tyro.extras.set_accent_color("bright_yellow")
    parameters = tyro.cli(EvalCLIArgs)

    pipeline, config = Renderer.extract_pipeline(
        parameters.model_uri, parameters.dataset_path
    )
    evaluator = Evaluator(pipeline=pipeline, config=config)

    evaluator.save_metrics(output_folder=parameters.output_folder)
    evaluator.save_images(
        modalities=parameters.modalities_to_save,
        output_path=parameters.output_folder,
    )


if __name__ == "__main__":
    main()
